#summary Ontology Design Pattern - Sets, Collections & Aggregates
#labels SIO,SADI,ODP
#sidebar SIOSideBar
Sets, collections and aggregates aim to associate arbitrary entities together with different minimal criteria.

*[http://semanticscience.org/resource/SIO_000289 'set']*

A set is an arbitrary collection of items (of any type), for which there may be zero members (aka empty set).

*[http://semanticscience.org/resource/SIO_000616 'collection']*

A collection is a set for which i) there exists at least one member at any given time and ii) each item is of the same type.

*[http://semanticscience.org/resource/ 'aggregate']*

An aggregate is a collection for which there exists at least two members at the same time. 


*[http://semanticscience.org/resource/SIO_000059 'has member']*

items in a set/collection/aggregate are specified with the 'has member' relation.


_examples_

If a collection contains only one kind of member, then we can write a class axiom like
{{{
'Collection of x-type valued items'
 equivalentClass
 'collection'
 and 'has member' some ('x' and 'has value' some Literal)
 and 'has member' only ('x' and 'has value' only Literal)
}}}

If a collection consists of values that must be paired together, we can write:
{{{
'Collection of xy-valued-pairs'
 equivalentClass 
   'collection' 
   and 'has member' some ('xy-pair' 
      and 'has component part' some ('x' and 'has value' some Literal)
      and 'has component part' some ('y' and 'has value' some Literal)
   )
}}}

example instantiation (in pretty turtle syntax]:
{{{
:cxy a 'Collection of xy-valued-pairs' ;
  'has member' [ a 'xy-pair'; 
      'has component part' [ a 'x'; 'has value' 1^^xsd:int] ;
      'has component part' [ a 'y'; 'has value' 2^^xsd:int] ;
   ] .
}}}